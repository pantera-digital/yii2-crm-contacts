<?php

namespace pantera\crm\contacts\models;

use Yii;

/**
 * This is the model class for table "crm_contacts".
 *
 * @property int $id
 * @property string $first_name
 * @property string $last_name
 * @property string $middle_name
 * @property string $phone
 * @property string $e-mail
 * @property  $clientParamsRegistries
 * @property string $birth_date
 */
class Contact extends \yii\db\ActiveRecord
{
    public $tags = [];

    const GENDER_MALE = 'MALE';
    const GENDER_FEMALE = 'FEMALE';
    const GENDER_NO = 'NO';

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%crm_contacts}}';
    }

    /**
    *   Возвращает человекопонятное название пола текущего контакта
    */
    public function getGenderName()
    {
        return $this->getGenders()[$this->gender];
    }

    /**
    *   Возвращает список полов
    */
    public function getGenders()
    {
        return [
            static::GENDER_NO => 'Не выбран',
            static::GENDER_MALE => 'Mужской',
            static::GENDER_FEMALE => 'Женский',
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            ['first_name', 'required'],
            ['email', 'email'],
            [['user_id'],'integer'],
            [['email', 'phone'], 'unique'],
            [['tags'],'each','rule' => ['integer']],
            [['birth_date','comment','created_at','gender'], 'safe'],
            [['first_name', 'last_name', 'middle_name'], 'string', 'max' => 255],
            [['phone', 'email'], 'string', 'max' => 50],
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if($tags = Param::findAll($this->tags)) {
            ParamRegistry::deleteAll(['contact_id' => $this->id]);
            foreach ($tags as $tag) {
                $relation = new ParamRegistry();
                $relation->param_id = $tag->id;
                $relation->contact_id = $this->id;
                $relation->user_id = Yii::$app->user->id;
                $relation->save();
            }
        }
    }


    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->tags = $this->getTagsRelation()->select('id')->column();
    }

    /**
    *   Возвращает полное имя контакта, сформированное из имени и фамилии
    */
    public function getFullName()
    {
        return $this->last_name . ' ' . $this->first_name;
    }


    public function getTagsRelation() {
        return $this->hasMany(Param::class,['id' => 'param_id'])
            ->viaTable(ParamRegistry::tableName(),['contact_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParamsRegistry() {
        return $this->hasMany(ParamRegistry::className(),['contact_id' => 'id']);
    }

    public function beforeSave($insert)
    {
        if($this->isNewRecord) {
            $this->user_id = Yii::$app->user->id;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'first_name' => 'Имя',
            'last_name' => 'Фамилия',
            'middle_name' => 'Отчество',
            'phone' => 'Телефон',
            'email' => 'E-mail',
            'gender' => 'Пол',
            'birth_date' => 'Дата рождения',
            'comment' => 'Примечание',
        ];
    }
}
